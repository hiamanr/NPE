empenhos_2021_final <- empenhos_2021_final %>%
rename(NL_ID = "Número Documento NL")
select_NF <- c("NL_ID", "Invoice_ID", "Invoice_order", "Cod_UG" )
# Joining empenhos' invoices with the materiais_empenho data  ----------------------------------------
## Loading and renaming materiais_empenhos data of interest
file <- "material_NL_2021.csv"
material_NL_2021 <- fread(file.path(drive_dir, file))
material_NL_2021 <- material_NL_2021 %>%
rename(NL_ID = "Número NL",
Date = "Data Atualização",
BEC_Code = "Código Item Material",
BEC_Description = "Nome Item Material",
CNPJ = "CNPJ CPF",
Cod_UG = "Código UG")
## Selecting columns to keep
select_NL <- c("NL_ID", "Date", "BEC_Code", "BEC_Description", "CNPJ", "Cod_UG")
## Matching
NLs_to_NFs_2021 <- left_join(
select(material_NL_2021, all_of(select_NL)),
select(empenhos_2021_final, all_of(select_NF)),
by = c("NL_ID" = "NL_ID", "Cod_UG" = "Cod_UG")
)
# Saving the data ----------------------------------------------------------
write.csv(NLs_to_NFs_2021, file.path(output_dir, "NLs_to_NFs_2021.csv"), row.names = FALSE)
rm(list = ls())
library(data.table)
library(tidyverse)
library(stringi)
# Summary -------------------------------------------------------------------
## This code cleans the columns related to the invoice numbers in the
# notas_fiscais_empenho_2022_pregao and notas_fiscais_empenho_2022_outros.
# With the invoice list organized, we join it with the empenhos data with has
# info regarding the companies and products contained in the material_NL_2022
# database, matching by the NL code.
# The final result is the link between the empenhos' NL and the invoices
# that can be used to link the empenhos processes with the original invoices
# directly at Sefaz.
# After that, the goal is to link the empenhos database the procurement one,
#  achieving a complete link between the invoices and the procurement data.
# Loading data ------------------------------------------------------------
## Define project directory
if (Sys.getenv('USERNAME') == "usuario") {
drive_dir <- "G:\\.shortcut-targets-by-id\\1KaL4opKLBPt0SXlaAT4p0Qc4uhOUpvN9\\SPProcurement\\PSP Data\\empenhos"
output_dir <- "G:\\.shortcut-targets-by-id\\1KaL4opKLBPt0SXlaAT4p0Qc4uhOUpvN9\\SPProcurement\\ProcurementData\\SPState\\NLs_to_NFs"
}
## Loading empenhos invoice data from "pregão" and "outros" and Rbinding the two databases
file <- "notas_fiscais_empenho_2022_pregao.csv"
empenho_2022_preg <- fread(file.path(drive_dir, file))
file <- "notas_fiscais_empenho_2022_outros.csv"
empenho_2022_outros <- fread(file.path(drive_dir, file))
empenhos_2022 <- rbind(empenho_2022_preg, empenho_2022_outros)
# Cleaning invoice columns in the empenhos data -----------------------------------------------
## Organizing all invoices in a single columns and cleaning unusable invoice IDs
empenhos_2022_final <- empenhos_2022 %>%
pivot_longer(cols = starts_with("Nota Fiscal"),
names_to = "Invoice_order",
names_prefix = "Nota Fiscal ",
values_to = "Invoice_ID") %>%
mutate(Invoice_ID = gsub("[[:space:]|[:punct:]|[:alpha:]]", "", Invoice_ID))%>%
filter(Invoice_ID != "")
## Organizing the Código de Gestão column
empenhos_2022_final <- empenhos_2022_final %>%
mutate(Cod_UG = as.numeric(str_extract(`Código Nome UG Documento`, "^[0-9]+")))
## Renaming the NL ID column and selecting columns for the match later
empenhos_2022_final <- empenhos_2022_final %>%
rename(NL_ID = "Número Documento NL")
select_NF <- c("NL_ID", "Invoice_ID", "Invoice_order", "Cod_UG" )
# Joining empenhos' invoices with the materiais_empenho data  ----------------------------------------
## Loading and renaming materiais_empenhos data of interest
file <- "material_NL_2022.csv"
material_NL_2022 <- fread(file.path(drive_dir, file))
material_NL_2022 <- material_NL_2022 %>%
rename(NL_ID = "Número NL",
Date = "Data Atualização",
BEC_Code = "Código Item Material",
BEC_Description = "Nome Item Material",
CNPJ = "CNPJ CPF",
Cod_UG = "Código UG")
## Selecting columns to keep
select_NL <- c("NL_ID", "Date", "BEC_Code", "BEC_Description", "CNPJ", "Cod_UG")
## Matching
NLs_to_NFs_2022 <- left_join(
select(material_NL_2022, all_of(select_NL)),
select(empenhos_2022_final, all_of(select_NF)),
by = c("NL_ID" = "NL_ID", "Cod_UG" = "Cod_UG")
)
# Saving the data ----------------------------------------------------------
write.csv(NLs_to_NFs_2022, file.path(output_dir, "NLs_to_NFs_2022.csv"), row.names = FALSE)
rm(list = ls())
library(data.table)
library(tidyverse)
library(stringi)
# Summary -------------------------------------------------------------------
## This code cleans the columns related to the invoice numbers in the
# notas_fiscais_empenho_2023_pregao and notas_fiscais_empenho_2023_outros.
# With the invoice list organized, we join it with the empenhos data with has
# info regarding the companies and products contained in the material_NL_2023
# database, matching by the NL code.
# The final result is the link between the empenhos' NL and the invoices
# that can be used to link the empenhos processes with the original invoices
# directly at Sefaz.
# After that, the goal is to link the empenhos database the procurement one,
#  achieving a complete link between the invoices and the procurement data.
# Loading data ------------------------------------------------------------
## Define project directory
if (Sys.getenv('USERNAME') == "usuario") {
drive_dir <- "G:\\.shortcut-targets-by-id\\1KaL4opKLBPt0SXlaAT4p0Qc4uhOUpvN9\\SPProcurement\\PSP Data\\empenhos"
output_dir <- "G:\\.shortcut-targets-by-id\\1KaL4opKLBPt0SXlaAT4p0Qc4uhOUpvN9\\SPProcurement\\ProcurementData\\SPState\\NLs_to_NFs"
}
## Loading empenhos invoice data from "pregão" and "outros" and Rbinding the two databases
file <- "notas_fiscais_empenho_2023_pregao.csv"
empenho_2023_preg <- fread(file.path(drive_dir, file))
file <- "notas_fiscais_empenho_2023_outros.csv"
empenho_2023_outros <- fread(file.path(drive_dir, file))
empenhos_2023 <- rbind(empenho_2023_preg, empenho_2023_outros)
# Cleaning invoice columns in the empenhos data -----------------------------------------------
## Organizing all invoices in a single columns and cleaning unusable invoice IDs
empenhos_2023_final <- empenhos_2023 %>%
pivot_longer(cols = starts_with("Nota Fiscal"),
names_to = "Invoice_order",
names_prefix = "Nota Fiscal ",
values_to = "Invoice_ID") %>%
mutate(Invoice_ID = gsub("[[:space:]|[:punct:]|[:alpha:]]", "", Invoice_ID))%>%
filter(Invoice_ID != "")
## Organizing the Código de Gestão column
empenhos_2023_final <- empenhos_2023_final %>%
mutate(Cod_UG = as.numeric(str_extract(`Código Nome UG Documento`, "^[0-9]+")))
## Renaming the NL ID column and selecting columns for the match later
empenhos_2023_final <- empenhos_2023_final %>%
rename(NL_ID = "Número Documento NL")
select_NF <- c("NL_ID", "Invoice_ID", "Invoice_order", "Cod_UG" )
# Joining empenhos' invoices with the materiais_empenho data  ----------------------------------------
## Loading and renaming materiais_empenhos data of interest
file <- "material_NL_2023.csv"
material_NL_2023 <- fread(file.path(drive_dir, file))
material_NL_2023 <- material_NL_2023 %>%
rename(NL_ID = "Número NL",
Date = "Data Atualização",
BEC_Code = "Código Item Material",
BEC_Description = "Nome Item Material",
CNPJ = "CNPJ CPF",
Cod_UG = "Código UG")
## Selecting columns to keep
select_NL <- c("NL_ID", "Date", "BEC_Code", "BEC_Description", "CNPJ", "Cod_UG")
## Matching
NLs_to_NFs_2023 <- left_join(
select(material_NL_2023, all_of(select_NL)),
select(empenhos_2023_final, all_of(select_NF)),
by = c("NL_ID" = "NL_ID", "Cod_UG" = "Cod_UG")
)
# Saving the data ----------------------------------------------------------
write.csv(NLs_to_NFs_2023, file.path(output_dir, "NLs_to_NFs_2023.csv"), row.names = FALSE)
View(NLs_to_NFs_2023)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("haven")
library(haven)
#install.packages("data.table")
library(data.table)
#install.packages("dplyr")
library(dplyr)
#install.packages("modi")
library(modi)
#install.packages("acid")
library(acid)
install.packages("dineq")
library(dineq)
## Setting work directory-------------------------------------------------------
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)%>%
gsub("\\Inequality analysis", "", .)
setwd(file_directory)
getwd()
## Opening databases from Brasmod-----------------------------------------------
# Setting folder path
folder_path <- "Databases//"
## Households' databases--------------------------------------------------------
# Opening Brasmod databases for year of reference
for(year in 2008:2022){
file_path <- paste0(folder_path, "bra_", year, "_std_hh.txt")
if (file.exists(file_path)) {
df <- fread(file_path, sep = "\t", dec = ",")
assign(paste0("bra_hh_", year), df)
cat("File", file_path, "read successfully.\n")
} else {
cat("File", file_path, "not found.\n")
}
}
## Individuals' databases-------------------------------------------------------
for(year in 2008:2022){
file_path <- paste0(folder_path, "bra_", year, "_std.txt")
if (file.exists(file_path)) {
df <- fread(file_path, sep = "\t", dec = ",")
assign(paste0("bra_hh_", year), df)
cat("File", file_path, "read successfully.\n")
} else {
cat("File", file_path, "not found.\n")
}
}
# Simulations' databases--------------------------------------------------------
# For households
sim_bra_hh_2020 <- fread("C:/Users/usuario/Documents/NPE/Databases/bra_2020_sim_std_hh.txt",
sep = "\t", dec = ",")
sim_bra_ind_2020 <- fread("C:/Users/usuario/Documents/NPE/Databases/bra_2020_sim_std.txt",
sep = "\t", dec = ",")
# For individuals
rbu_bra_hh_2020 <- fread("C:/Users/usuario/Documents/NPE/Databases/bra_2020_rbu_std_hh.txt",
sep = "\t", dec = ",")
rbu_bra_ind_2020 <- fread("C:/Users/usuario/Documents/NPE/Databases/bra_2020_rbu_std.txt",
sep = "\t", dec = ",")
bra_ind_2020 <- fread("C:/Users/usuario/Documents/NPE/Databases/bra_2020_std.txt",
sep = "\t", dec = ",")
bra_hh_2020 <- fread("C:/Users/usuario/Documents/NPE/Databases/bra_2020_std_hh.txt",
sep = "\t", dec = ",")
### Analysis--------------------------------------------------------------------
## Gini - scenario 1------------------------------------------------------------
# Creating list for disposable income
gini_list_dispy <- c()
for(year in 2008:2022){
name_dispy <- paste0("gini_dispy_", as.character(year))
df_dispy <- get(paste0("bra_hh_", as.character(year)))
assign(name_dispy,
gini.wtd(df_dispy$ils_dispy, df_dispy$dwt))
gini_list_dispy <- c(gini_list_dispy, get(name_dispy))
}
print(gini_list_dispy)
# Creating list for original income
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
print(gini_list_origy)
## Graphing disposable and original income--------------------------------------
years <- 2008:2022
color_list <- c("#FF7276", "#3366ff", "#feff41", "#45ff66")
income_concepts <- c("dispy", "origy")
plot <- ggplot()
for(income in income_concepts){
df <- data.frame(year = 2008:2022,
gini = get(paste0("gini_list_", income)),
income_concept = case_when(
income == "dispy" ~ "Renda disponível",
income == "origy" ~ "Renda original"
))
plot <- plot +
geom_line(data = df,
aes(x = year, y = gini, color = income_concept)) +
geom_point(data = df,
aes(x = year, y = gini, color = income_concept))
if(income == tail(income_concepts, 1)) {
plot_final <- plot +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
labs(title = "Cenário 1: Índice de Gini com Auxílio Emergencial",
x = "Ano",
y = "Gini",
color = "Conceito de renda") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
}
}
## Contrafactual scenarios------------------------------------------------------
## Gini - scenario 2------------------------------------------------------------
# Creating list for Disposable income, replacing for contrafactual data for 2020
gini_dispy_2020 <- gini.wtd(sim_bra_hh_2020$ils_dispy, sim_bra_hh_2020$dwt)
gini_list_dispy <- c()
for(year in 2008:2022){
name_dispy <- paste0("gini_dispy_", as.character(year))
df_dispy <- get(paste0("bra_hh_", as.character(year)))
assign(name_dispy,
gini.wtd(df_dispy$ils_dispy, df_dispy$dwt))
gini_list_dispy <- c(gini_list_dispy, get(name_dispy))
}
index_2020 <- 2020 - 2008 + 1
# Assuming you have already executed the loop to create gini_list_dispy
# Update the value at the index corresponding to the year 2020
gini_list_dispy[index_2020] <- gini.wtd(sim_bra_hh_2020$ils_dispy, sim_bra_hh_2020$dwt)
print(gini_list_dispy)
# Creating list for original income
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
index_2020 <- 2020 - 2008 + 1
# Assuming you have already executed the loop to create gini_list_dispy
# Update the value at the index corresponding to the year 2020
gini_list_origy[index_2020] <- gini.wtd(sim_bra_hh_2020$ils_origy, sim_bra_hh_2020$dwt)
print(gini_list_origy)
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
print(gini_list_origy)
## Plotting graph---------------------------------------------------------------
years <- 2008:2022
color_list <- c("#FF7276", "#3366ff", "#feff41", "#45ff66")
income_concepts <- c("dispy", "origy")
plot <- ggplot()
for(income in income_concepts){
df <- data.frame(year = 2008:2022,
gini = get(paste0("gini_list_", income)),
income_concept = case_when(
income == "dispy" ~ "Renda disponível",
income == "origy" ~ "Renda original"
))
plot <- plot +
geom_line(data = df,
aes(x = year, y = gini, color = income_concept)) +
geom_point(data = df,
aes(x = year, y = gini, color = income_concept))
if(income == tail(income_concepts, 1)) {
plot_final <- plot +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
labs(title = "Cenário 2: Índice de Gini (sem Auxílio Emergencial)",
x = "Ano",
y = "Gini",
color = "Conceito de renda") +
theme_bw()+
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
}
}
## Gini - scenario 3------------------------------------------------------------
# Creating list for Disposable income, replacing for contrafactual data for 2020
gini_dispy_2020 <- gini.wtd(rbu_bra_hh_2020$ils_dispy, rbu_bra_hh_2020$dwt)
gini_list_dispy <- c()
for(year in 2008:2022){
name_dispy <- paste0("gini_dispy_", as.character(year))
df_dispy <- get(paste0("bra_hh_", as.character(year)))
assign(name_dispy,
gini.wtd(df_dispy$ils_dispy, df_dispy$dwt))
gini_list_dispy <- c(gini_list_dispy, get(name_dispy))
}
index_2020 <- 2020 - 2008 + 1
# Assuming you have already executed the loop to create gini_list_dispy
# Update the value at the index corresponding to the year 2020
gini_list_dispy[index_2020] <- gini.wtd(rbu_bra_hh_2020$ils_dispy, rbu_bra_hh_2020$dwt)
print(gini_list_dispy)
# Creating list for original income
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
index_2020 <- 2020 - 2008 + 1
# Assuming you have already executed the loop to create gini_list_dispy
# Update the value at the index corresponding to the year 2020
gini_list_origy[index_2020] <- gini.wtd(rbu_bra_hh_2020$ils_origy, rbu_bra_hh_2020$dwt)
print(gini_list_origy)
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
print(gini_list_origy)
## Plotting graph---------------------------------------------------------------
years <- 2008:2022
color_list <- c("#FF7276", "#3366ff", "#feff41", "#45ff66")
income_concepts <- c("dispy", "origy")
plot <- ggplot()
for(income in income_concepts){
df <- data.frame(year = 2008:2022,
gini = get(paste0("gini_list_", income)),
income_concept = case_when(
income == "dispy" ~ "Renda disponível",
income == "origy" ~ "Renda original"
))
plot <- plot +
geom_line(data = df,
aes(x = year, y = gini, color = income_concept)) +
geom_point(data = df,
aes(x = year, y = gini, color = income_concept))
if(income == tail(income_concepts, 1)) {
plot_final <- plot +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
labs(title = "Cenário 3: Índice de Gini (com RBU)",
x = "Ano",
y = "Gini",
color = "Conceito de renda") +
theme_bw()+
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
}
}
print(gini_list_dispy)
### Analysis--------------------------------------------------------------------
## Gini - scenario 1------------------------------------------------------------
# Creating list for disposable income
gini_list_dispy_1 <- c()
for(year in 2008:2022){
name_dispy <- paste0("gini_dispy_", as.character(year))
df_dispy <- get(paste0("bra_hh_", as.character(year)))
assign(name_dispy,
gini.wtd(df_dispy$ils_dispy, df_dispy$dwt))
gini_list_dispy_1 <- c(gini_list_dispy_1, get(name_dispy))
}
print(gini_list_dispy_1)
# Creating list for original income
gini_list_origy_1 <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy_1 <- c(gini_list_origy_1, get(name_origy))
}
print(gini_list_origy_1)
## Gini - scenario 2------------------------------------------------------------
# Creating list for Disposable income, replacing for contrafactual data for 2020
gini_list_dispy_2 <- gini_list_dispy_1
gini_list_dispy_2[2020 - 2008 + 1] <- gini.wtd(sim_bra_hh_2020$ils_dispy, sim_bra_hh_2020$dwt)
print(gini_list_dispy_2)
# Creating list for original income
gini_list_origy_2 <- gini_list_origy_1
gini_list_origy_2[2020 - 2008 + 1] <- gini.wtd(sim_bra_hh_2020$ils_origy, sim_bra_hh_2020$dwt)
print(gini_list_origy_2)
## Gini - scenario 3------------------------------------------------------------
# Creating list for Disposable income, replacing for contrafactual data for 2020
gini_list_dispy_3 <- gini_list_dispy_1
gini_list_dispy_3[2020 - 2008 + 1] <- gini.wtd(rbu_bra_hh_2020$ils_dispy, rbu_bra_hh_2020$dwt)
print(gini_list_dispy_3)
# Creating list for original income
gini_list_origy_3 <- gini_list_origy_1
gini_list_origy_3[2020 - 2008 + 1] <- gini.wtd(rbu_bra_hh_2020$ils_origy, rbu_bra_hh_2020$dwt)
print(gini_list_origy_3)
## Combine data for all scenarios------------------------------------------------
years <- 2008:2022
# Create a data frame for all scenarios and income concepts
df_combined <- data.frame(
year = rep(years, 6),
gini = c(gini_list_dispy_1, gini_list_origy_1,
gini_list_dispy_2, gini_list_origy_2,
gini_list_dispy_3, gini_list_origy_3),
income_concept = factor(rep(c("Renda disponível", "Renda original"), each = length(years))),
scenario = factor(rep(c("Cenário 1", "Cenário 1", "Cenário 2", "Cenário 2", "Cenário 3", "Cenário 3"), each = length(years)))
)
## Plotting combined graph------------------------------------------------------
color_list <- c("Renda disponível" = "#FF7276", "Renda original" = "#3366ff")
shape_list <- c("Cenário 1" = 16, "Cenário 2" = 17, "Cenário 3" = 18)
plot_final <- ggplot(df_combined, aes(x = year, y = gini, color = income_concept, shape = scenario)) +
geom_line(aes(linetype = scenario)) +
geom_point() +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
scale_shape_manual(values = shape_list) +
labs(title = "Índice de Gini para Diferentes Cenários",
x = "Ano",
y = "Gini",
color = "Conceito de renda",
shape = "Cenário",
linetype = "Cenário") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
plot_final <- ggplot(df_combined, aes(x = year, y = gini, color = income_concept, shape = scenario)) +
geom_line(aes(linetype = scenario)) +
geom_point() +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
scale_shape_manual(values = shape_list) +
labs(title = "",
x = "Ano",
y = "Gini",
color = "Conceito de renda",
shape = "Cenário",
linetype = "Cenário") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
png("plot_final.png", width = 4800, height = 3200, res = 300)
ggsave("plot_final.png", plot = plot_final, width = 4800, height = 3200)
ggsave("plot_final.png", plot = plot_final, width = 10, height = 6)
