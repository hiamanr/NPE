gini_dispy_2020_rbu <- gini.wtd(rbu_bra_hh_2020$ils_dispy, rbu_bra_hh_2020$dwt)
gini_list_dispy <- c()
for(year in 2008:2022){
name_dispy <- paste0("gini_dispy_", as.character(year))
df_dispy <- get(paste0("bra_hh_", as.character(year)))
assign(name_dispy,
gini.wtd(df_dispy$ils_dispy, df_dispy$dwt))
gini_list_dispy <- c(gini_list_dispy, get(name_dispy))
}
index_2020_rbu <- 2020 - 2008 + 1
gini_list_dispy[index_2020_rbu] <- gini.wtd(rbu_bra_hh_2020$ils_dispy, rbu_bra_hh_2020$dwt)
print(gini_list_dispy)
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
index_2020_rbu <- 2020 - 2008 + 1
gini_list_origy[index_2020] <- gini.wtd(rbu_bra_hh_2020$ils_origy, rbu_bra_hh_2020$dwt)
print(gini_list_origy)
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
print(gini_list_origy)
years <- 2008:2022
color_list <- c("#FF7276", "#3366ff", "#feff41", "#45ff66")
income_concepts <- c("dispy", "origy")
plot <- ggplot()
for(income in income_concepts){
df <- data.frame(year = 2008:2022,
gini = get(paste0("gini_list_", income)),
income_concept = case_when(
income == "dispy" ~ "Renda disponível",
income == "origy" ~ "Renda original"
))
plot <- plot +
geom_line(data = df,
aes(x = year, y = gini, color = income_concept)) +
geom_point(data = df,
aes(x = year, y = gini, color = income_concept))
if(income == tail(income_concepts, 1)) {
plot_final <- plot +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
labs(title = "Cenário 2: Índice de Gini (sem Auxílio Emergencial)",
x = "Ano",
y = "Gini",
color = "Conceito de renda") +
theme_bw()+
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
}
}
### Notes on Political Economy - MADE (2024)------------------------------------
## Packages---------------------------------------------------------------------
#install.packages("tidyverse")
library(tidyverse)
#install.packages("haven")
library(haven)
#install.packages("data.table")
library(data.table)
#install.packages("dplyr")
library(dplyr)
#install.packages("modi")
library(modi)
#install.packages("acid")
library(acid)
#install.packages("dineq")
library(dineq)
## Setting work directory-------------------------------------------------------
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)%>%
gsub("\\Inequality analysis", "", .)
setwd(file_directory)
getwd()
## Opening databases from Brasmod-----------------------------------------------
# Setting folder path
folder_path <- "Databases//"
## Households' databases--------------------------------------------------------
# Opening Brasmod databases for year of reference
for(year in 2008:2022){
file_path <- paste0(folder_path, "bra_", year, "_std_hh.txt")
if (file.exists(file_path)) {
df <- fread(file_path, sep = "\t", dec = ",")
assign(paste0("bra_hh_", year), df)
cat("File", file_path, "read successfully.\n")
} else {
cat("File", file_path, "not found.\n")
}
}
## Individuals' databases-------------------------------------------------------
for(year in 2008:2022){
file_path <- paste0(folder_path, "bra_", year, "_std.txt")
if (file.exists(file_path)) {
df <- fread(file_path, sep = "\t", dec = ",")
assign(paste0("bra_hh_", year), df)
cat("File", file_path, "read successfully.\n")
} else {
cat("File", file_path, "not found.\n")
}
}
# Simulations' databases--------------------------------------------------------
# For households
sim_bra_hh_2020 <- fread("C:/Users/lauro/Documents/GitHub/NPE/Databases/bra_2020_sim_std_hh.txt",
sep = "\t", dec = ",")
sim_bra_ind_2020 <- fread("C:/Users/lauro/Documents/GitHub/NPE/Databases/bra_2020_sim_std.txt",
sep = "\t", dec = ",")
# For individuals
rbu_bra_hh_2020 <- fread("C:/Users/lauro/Documents/GitHub/NPE/Databases/bra_2020_rbu_std_hh.txt",
sep = "\t", dec = ",")
rbu_bra_ind_2020 <- fread("C:/Users/lauro/Documents/GitHub/NPE/Databases/bra_2020_rbu_std.txt",
sep = "\t", dec = ",")
### Analysis--------------------------------------------------------------------
## Gini - scenario 1------------------------------------------------------------
# Creating list for disposable income
gini_list_dispy <- c()
for(year in 2008:2022){
name_dispy <- paste0("gini_dispy_", as.character(year))
df_dispy <- get(paste0("bra_hh_", as.character(year)))
assign(name_dispy,
gini.wtd(df_dispy$ils_dispy, df_dispy$dwt))
gini_list_dispy <- c(gini_list_dispy, get(name_dispy))
}
print(gini_list_dispy)
# Creating list for original income
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
print(gini_list_origy)
## Graphing disposable and original income--------------------------------------
years <- 2008:2022
color_list <- c("#FF7276", "#3366ff", "#feff41", "#45ff66")
income_concepts <- c("dispy", "origy")
plot <- ggplot()
for(income in income_concepts){
df <- data.frame(year = 2008:2022,
gini = get(paste0("gini_list_", income)),
income_concept = case_when(
income == "dispy" ~ "Renda disponível",
income == "origy" ~ "Renda original"
))
plot <- plot +
geom_line(data = df,
aes(x = year, y = gini, color = income_concept)) +
geom_point(data = df,
aes(x = year, y = gini, color = income_concept))
if(income == tail(income_concepts, 1)) {
plot_final <- plot +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
labs(title = "Cenário 1: Índice de Gini com Auxílio Emergencial",
x = "Ano",
y = "Gini",
color = "Conceito de renda") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
}
}
## Contrafactual scenarios------------------------------------------------------
## Gini - scenario 2------------------------------------------------------------
# Creating list for Disposable income, replacing for contrafactual data for 2020
gini_dispy_2020 <- gini.wtd(sim_bra_hh_2020$ils_dispy, sim_bra_hh_2020$dwt)
gini_list_dispy <- c()
for(year in 2008:2022){
name_dispy <- paste0("gini_dispy_", as.character(year))
df_dispy <- get(paste0("bra_hh_", as.character(year)))
assign(name_dispy,
gini.wtd(df_dispy$ils_dispy, df_dispy$dwt))
gini_list_dispy <- c(gini_list_dispy, get(name_dispy))
}
index_2020 <- 2020 - 2008 + 1
# Assuming you have already executed the loop to create gini_list_dispy
# Update the value at the index corresponding to the year 2020
gini_list_dispy[index_2020] <- gini.wtd(sim_bra_hh_2020$ils_dispy, sim_bra_hh_2020$dwt)
print(gini_list_dispy)
# Creating list for original income
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
index_2020 <- 2020 - 2008 + 1
# Assuming you have already executed the loop to create gini_list_dispy
# Update the value at the index corresponding to the year 2020
gini_list_origy[index_2020] <- gini.wtd(sim_bra_hh_2020$ils_origy, sim_bra_hh_2020$dwt)
print(gini_list_origy)
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
print(gini_list_origy)
## Plotting graph---------------------------------------------------------------
years <- 2008:2022
color_list <- c("#FF7276", "#3366ff", "#feff41", "#45ff66")
income_concepts <- c("dispy", "origy")
plot <- ggplot()
for(income in income_concepts){
df <- data.frame(year = 2008:2022,
gini = get(paste0("gini_list_", income)),
income_concept = case_when(
income == "dispy" ~ "Renda disponível",
income == "origy" ~ "Renda original"
))
plot <- plot +
geom_line(data = df,
aes(x = year, y = gini, color = income_concept)) +
geom_point(data = df,
aes(x = year, y = gini, color = income_concept))
if(income == tail(income_concepts, 1)) {
plot_final <- plot +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
labs(title = "Cenário 2: Índice de Gini (sem Auxílio Emergencial)",
x = "Ano",
y = "Gini",
color = "Conceito de renda") +
theme_bw()+
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
}
}
## Race and gender analysis-----------------------------------------------------
gini_list_dispy <- c()
for(year in 2008:2022){
name_dispy <- paste0("gini_dispy_", as.character(year))
df_dispy <- get(paste0("bra_hh_", as.character(year)))
assign(name_dispy,
gini.wtd(df_dispy$ils_dispy, df_dispy$dwt))
gini_list_dispy <- c(gini_list_dispy, get(name_dispy))
}
print(gini_list_dispy)
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
print(gini_list_origy)
years <- 2008:2022
color_list <- c("#FF7276", "#3366ff", "#feff41", "#45ff66")
income_concepts <- c("dispy", "origy")
plot <- ggplot()
for(income in income_concepts){
df <- data.frame(year = 2008:2022,
gini = get(paste0("gini_list_", income)),
income_concept = case_when(
income == "dispy" ~ "Renda disponível",
income == "origy" ~ "Renda original"
))
plot <- plot +
geom_line(data = df,
aes(x = year, y = gini, color = income_concept)) +
geom_point(data = df,
aes(x = year, y = gini, color = income_concept))
if(income == tail(income_concepts, 1)) {
plot_final <- plot +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
labs(title = "Cenário 1: Índice de Gini com Auxílio Emergencial",
x = "Ano",
y = "Gini",
color = "Conceito de renda") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
}
}
gini_dispy_2020 <- gini.wtd(sim_bra_hh_2020$ils_dispy, sim_bra_hh_2020$dwt)
#install.packages("tidyverse")
library(tidyverse)
#install.packages("haven")
library(haven)
#install.packages("data.table")
library(data.table)
#install.packages("dplyr")
library(dplyr)
#install.packages("modi")
library(modi)
#install.packages("acid")
library(acid)
#install.packages("dineq")
library(dineq)
file_directory <- dirname(rstudioapi::getSourceEditorContext()$path)%>%
gsub("\\Inequality analysis", "", .)
setwd(file_directory)
getwd()
folder_path <- "Databases//"
for(year in 2008:2022){
file_path <- paste0(folder_path, "bra_", year, "_std_hh.txt")
if (file.exists(file_path)) {
df <- fread(file_path, sep = "\t", dec = ",")
assign(paste0("bra_hh_", year), df)
cat("File", file_path, "read successfully.\n")
} else {
cat("File", file_path, "not found.\n")
}
}
# For households
sim_bra_hh_2020 <- fread("C:/Users/lauro/Documents/GitHub/NPE/Databases/bra_2020_sim_std_hh.txt",
sep = "\t", dec = ",")
# For individuals
rbu_bra_hh_2020 <- fread("C:/Users/lauro/Documents/GitHub/NPE/Databases/bra_2020_rbu_std_hh.txt",
sep = "\t", dec = ",")
# Scenario 2
rbu_bra_hh_2020 <- fread("C:/Users/lauro/Documents/GitHub/NPE/Databases/bra_2020_rbu_std_hh.txt",
sep = "\t", dec = ",")
# Scenario 1
sim_bra_hh_2020 <- fread("C:/Users/lauro/Documents/GitHub/NPE/Databases/bra_2020_sim_std_hh.txt",
sep = "\t", dec = ",")
gini_list_dispy <- c()
for(year in 2008:2022){
name_dispy <- paste0("gini_dispy_", as.character(year))
df_dispy <- get(paste0("bra_hh_", as.character(year)))
assign(name_dispy,
gini.wtd(df_dispy$ils_dispy, df_dispy$dwt))
gini_list_dispy <- c(gini_list_dispy, get(name_dispy))
}
print(gini_list_dispy)
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
print(gini_list_origy)
years <- 2008:2022
color_list <- c("#FF7276", "#3366ff", "#feff41", "#45ff66")
income_concepts <- c("dispy", "origy")
plot <- ggplot()
for(income in income_concepts){
df <- data.frame(year = 2008:2022,
gini = get(paste0("gini_list_", income)),
income_concept = case_when(
income == "dispy" ~ "Renda disponível",
income == "origy" ~ "Renda original"
))
plot <- plot +
geom_line(data = df,
aes(x = year, y = gini, color = income_concept)) +
geom_point(data = df,
aes(x = year, y = gini, color = income_concept))
if(income == tail(income_concepts, 1)) {
plot_final <- plot +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
labs(title = "Cenário 1: Índice de Gini com Auxílio Emergencial",
x = "Ano",
y = "Gini",
color = "Conceito de renda") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
}
}
gini_dispy_2020 <- gini.wtd(sim_bra_hh_2020$ils_dispy, sim_bra_hh_2020$dwt)
gini_list_dispy <- c()
for(year in 2008:2022){
name_dispy <- paste0("gini_dispy_", as.character(year))
df_dispy <- get(paste0("bra_hh_", as.character(year)))
assign(name_dispy,
gini.wtd(df_dispy$ils_dispy, df_dispy$dwt))
gini_list_dispy <- c(gini_list_dispy, get(name_dispy))
}
index_2020 <- 2020 - 2008 + 1
gini_list_dispy[index_2020] <- gini.wtd(sim_bra_hh_2020$ils_dispy, sim_bra_hh_2020$dwt)
print(gini_list_dispy)
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
index_2020 <- 2020 - 2008 + 1
gini_list_origy[index_2020] <- gini.wtd(sim_bra_hh_2020$ils_origy, sim_bra_hh_2020$dwt)
print(gini_list_origy)
gini_list_origy <- c()
for(year in 2008:2022){
name_origy <- paste0("gini_origy_", as.character(year))
df_origy <- get(paste0("bra_hh_", as.character(year)))
assign(name_origy,
gini.wtd(df_origy$ils_origy, df_origy$dwt))
gini_list_origy <- c(gini_list_origy, get(name_origy))
}
print(gini_list_origy)
years <- 2008:2022
color_list <- c("#FF7276", "#3366ff", "#feff41", "#45ff66")
income_concepts <- c("dispy", "origy")
plot <- ggplot()
for(income in income_concepts){
df <- data.frame(year = 2008:2022,
gini = get(paste0("gini_list_", income)),
income_concept = case_when(
income == "dispy" ~ "Renda disponível",
income == "origy" ~ "Renda original"
))
plot <- plot +
geom_line(data = df,
aes(x = year, y = gini, color = income_concept)) +
geom_point(data = df,
aes(x = year, y = gini, color = income_concept))
if(income == tail(income_concepts, 1)) {
plot_final <- plot +
scale_y_continuous(limits = c(0.25, 0.75))+
scale_x_continuous(limits = c(2008, 2022),
breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
labs(title = "Cenário 2: Índice de Gini (sem Auxílio Emergencial)",
x = "Ano",
y = "Gini",
color = "Conceito de renda") +
theme_bw()+
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot_final)
}
}
library(ggplot2)
library(dplyr)
calculate_gini <- function(years, income_type, df_prefix) {
gini_list <- c()
for(year in years) {
df <- get(paste0(df_prefix, year))
gini_value <- gini.wtd(df[[paste0("ils_", income_type)]], df$dwt)
gini_list <- c(gini_list, gini_value)
}
return(gini_list)
}
highlight_2020 <- function(gini_list, sim_df, income_type, index_2020) {
gini_2020 <- gini.wtd(sim_df[[paste0("ils_", income_type)]], sim_df$dwt)
gini_list[index_2020] <- gini_2020
return(gini_list)
}
years <- 2008:2022
index_2020 <- which(years == 2020)
color_list <- c("Renda disponível" = "#FF7276", "Renda original" = "#3366ff")
# Calculate Gini coefficients for disposable and original income
gini_list_dispy <- calculate_gini(years, "dispy", "bra_hh_")
gini_list_origy <- calculate_gini(years, "origy", "bra_hh_")
# Update 2020 Gini values based on simulation data
gini_list_dispy <- highlight_2020(gini_list_dispy, sim_bra_hh_2020, "dispy", index_2020)
gini_list_origy <- highlight_2020(gini_list_origy, sim_bra_hh_2020, "origy", index_2020)
# Create a data frame for plotting
df_plot <- data.frame(
year = rep(years, 2),
gini = c(gini_list_dispy, gini_list_origy),
income_concept = rep(c("Renda disponível", "Renda original"), each = length(years))
)
# Plotting the graph
plot <- ggplot(df_plot, aes(x = year, y = gini, color = income_concept)) +
geom_line(size = 1) +
geom_point(size = 2) +
scale_y_continuous(limits = c(0.25, 0.75)) +
scale_x_continuous(limits = c(2008, 2022), breaks = seq(2008, 2022, 1)) +
scale_color_manual(values = color_list) +
labs(
title = "Índice de Gini com e sem Auxílio Emergencial",
x = "Ano",
y = "Gini",
color = "Conceito de renda"
) +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5)  # Center the title
)
print(plot)
